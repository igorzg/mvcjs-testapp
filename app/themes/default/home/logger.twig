{% extends "layouts/default" %}
{% block content %}
<div class="mv-content">
    <h1 class="mv-h1">Logger</h1>
    <p>Logger is component in system, see more about <a href="/components"  class="mv-a">components</a>.</p>

    <code class="language-javascript">
        "components": [
            {
            "name": "core/logger", // name of component
            "enabled": true, // is logger enabled
            "write": true, // should be written to disk ?
            "publish": true, // publish to port 9001
            "console": false, // log it in console
            "port": 9001, // log publish port
            "file": "server.log" // log file
            },
        ]
    </code>
    <h2 class="mv-h2">Log displayed in iframe</h2>
    <iframe src="http://localhost:9001/" class="mv-frame"></iframe>
    <p>View logger in <a href="http://localhost:9001/" target="_blank" class="mv-a">new page</a>. </p>
    <h2 class="mv-h2">Logger hooks</h2>
    <p>Add logger hook in env config to store in db:</p>
    <code class="language-javascript">
        module.exports = function (componet, di) {
            "use strict";
            var viewLoader,
            logger = componet.get('core/logger'),
            loggerModel = di.load('@{modelsPath}/logger');
            logger.addHook(loggerModel.save.bind(loggerModel));
        }
    </code>

    <h2 class="mv-h2">How to use logger ?</h2>
    <p>Load logger in to your controller/model/component</p>
    <code class="language-javascript">
        var di = require('mvcjs'), // mvcjs as node package
            component = di.load('core/component'),
            logger = component.get('core/logger');

        /// eg. in your controller action
        logger.print('Some message', {}, 'as many arguments as you want and it could be any type');
    </code>
</div>
{% parent %}
{% endblock %}