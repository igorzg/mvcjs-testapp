[
  {
    "text": "<h1 class=\"mv-h1\">Routing tutorial</h1>\n\n<p class=\"mv-p\">\n\n    When Mvcjs starts processing a requested URL, the first step it takes is to parse the URL into a route\n    The route is then used to instantiate the corresponding controller action to handle the request.\n    This whole process is called routing.\n</p>\n\n<h2 class=\"mv-h2\">Routes</h2>\n\n<p class=\"mv-p\">\n    End users address actions through the so-called routes. A route is a string that consists of the following\n    parts: <br/>\n<ul class=\"mv-ul\">\n    <li> a controller ID: a string that uniquely identifies the controller among all controllers within the same\n        application (or the same module if the controller belongs to a module);\n    </li>\n    <li> an action ID: a string that uniquely identifies the action among all actions within the same\n        controller.\n    </li>\n</ul>\n<br/>\nRoutes take the following format:\n<span class=\"mv-command\">ControllerID/ActionID</span>\n\n</p>\n\n<h2 class=\"mv-h2\">Static routes</h2>\n<p>\n    All routes are executed in order as thy are defined!\n</p>\n<code class=\"language-javascript\">\n    router.add([\n        {\n            pattern: 'user/&lt;view:(\\\\d+)&gt;', // matches /user/1, /user/2\n            route: 'user/view' // controller user action view\n        },\n        {\n            pattern: 'home/&lt;action&gt;', // matches /home/index /home/contact\n            route: 'home/&lt;action&gt;' // controller home action any\n        },\n        {\n            pattern: 'contact', // matches /contact\n            route: 'home/contact' // controller home action contact\n        },\n        {\n            pattern: '&lt;controller&gt;/&lt;action&gt;', // matches /home/index /user/index /user/view\n            route: '&lt;controller&gt;/&lt;action&gt;' // controller any action any\n        },\n        {\n            pattern: 'user/&lt;action:(create|view|update|delete)&gt;', // matches /user/create /user/view /user/update /user/delete\n            route: 'user/&lt;action&gt;' // controller user action (create|view|update|delete)\n        },\n        {\n            pattern: 'user/&lt;action:(update|view|delete)&gt;/&lt;id:(\\\\d+)&gt;', // matches /user/update/5 /user/view/10 /user/delete/1000\n            route: 'user/&lt;action&gt;' // controller user action (update|view|delete)\n        }\n    ]);\n\n    router.add({\n        pattern: '/', // matches /\n        route: 'home/index' // controller home action index\n    });\n</code>\n<h2 class=\"mv-h2\">Dynamic routes</h2>\n<code class=\"language-javascript\">\n    router.add([\n        {\n            dynamic: true,\n            constructor: di.load('@{envPath}/dynamic-router')\n        }\n    ]);\n    router.add({\n        pattern: '/', // matches /\n        route: 'home/index' // controller home action index\n    });\n</code>\n<p>Dynamic router:</p>\n<code class=\"language-javascript\">\n    var di = require('mvcjs'),\n    RouteRuleInterface = di.load('interface/routeRule'),\n    menuModel = di.load('@{modelsPath}/menu'),\n    Promise = di.load('promise'),\n    MenuRoute;\n\n    MenuRoute = RouteRuleInterface.inherit({}, {\n        parseRequest: function(method, route) {\n            return new Promise(function (resolve, reject) {\n                menuModel.findOne({link: route.pathname}, function(err, data) {\n                    if (!!data && !!data.route) {\n                        resolve([data.route, route.query]); // route must be returned as array format ['home/index', {id: 1}] string, object params\n                    }else {\n                        resolve(false);\n                    }\n                });\n            });\n        },\n        createUrl: function(route, params) {\n            if (route === 'custom/route') { // match route\n                if (params.link) {\n                    return params.link; // return custom link from params\n                }\n            }\n            return false;\n            /*\n                Eg:\n                {\n                    \"title\": \"Routing\",\n                    \"link\": \"/getting-started/routing\",\n                    \"route\": \"custom/route\", // controller custom action route\n                    \"blank\": false\n                }\n            */\n        }\n    });\n\n    module.exports = MenuRoute;\n</code>",
    "url": "/getting-started/routing",
    "pageTitle": "Routing component - mvcjs nodejs framework",
    "pageDesc": "Tutorial for routing component,  when Mvcjs starts processing a requested URL, the first step it takes is to parse the URL"
  },
  {
    "text": "<h1 class=\"mv-h1\">Components</h1>\n\n<p class=\"mv-p\">\n    Components host a set of the so-called application components that provide different services for processing\n    requests. <br/>\n    For example, the core/router component is responsible for routing Web requests to appropriate controllers;\n    the core/db component provides mogodb services; and so on. <br/>\n    All components are <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\" class=\"mv-a\"\n                          target=\"_blank\">singleton</a>\n    objects in system.\n</p>\n\n<h2 class=\"mv-h2\">Core Components</h2>\n<ul class=\"mv-ul\">\n    <li>core/logger</li>\n    <li>core/router</li>\n    <li>core/favicon</li>\n    <li>core/view</li>\n    <li>core/assets</li>\n    <li>db/mongo</li>\n    <li>cache/memory</li>\n</ul>\n<h2 class=\"mv-h2\">Bootstrapping Components</h2>\n\n<p class=\"mv-p\">\n    As mentioned above, an application component will only be instantiated when it is being accessed the first\n    time.<br/>\n    Usually that is happening at bootstrapping application but thy can be bootstrapped at some controller\n    model.<br/>\n    You can always override default core component and provide own implementation of some core component.\n</p>\n\n<p class=\"mv-p\">\n    Bootstraping over environment.json\n</p>\n<code class=\"language-javascript\">\n    \"components\": [\n        {\n            \"name\": \"core/logger\",\n            \"enabled\": true,\n            \"write\": true,\n            \"publish\": true,\n            \"console\": false,\n            \"port\": 9001,\n            \"file\": \"server.log\"\n        },\n        {\n            \"name\": \"core/router\",\n            \"errorRoute\": \"core/error\"\n        },\n        {\n            \"name\": \"core/favicon\",\n            \"path\": \"@{basePath}/favicon.ico\"\n        },\n        {\n            \"name\": \"core/view\",\n            \"themes\": \"@{appPath}/themes/\",\n            \"views\": \"@{appPath}/views/\",\n            \"theme\": \"default\",\n            \"cache\": false\n        },\n        {\n            \"name\": \"core/assets\",\n            \"path\": \"@{basePath}/storage/\",\n            \"hook\": \"^\\\\/assets\"\n        },\n        {\n            \"name\": \"db/mongo\",\n            \"connection\": \"mongodb://localhost/testdb\"\n        }\n    ]\n</code>\n<p class=\"mv-p\">\n    Providing custom core implementation\n</p>\n<code class=\"language-javascript\">\n    \"components\": [\n        {\n            \"name\": \"core/logger\",\n            \"filePath\": \"@{appPath}/core/my-logger-implementation\"\n            \"enabled\": true,\n            \"write\": true,\n            \"publish\": true,\n            \"console\": false,\n            \"port\": 9001,\n            \"file\": \"server.log\"\n        }\n    ]\n</code>\n\n<h2 class=\"mv-h2\">\n    Creating custom component\n</h2>\n<p>\n    Component can be initialized to system in two ways over environment.json<br />\n    Your component must be function type!\n</p>\n<code class=\"language-javascript\">\n    \"components\": [\n        {\n            \"name\": \"app/core/custom\",\n            \"filePath\": \"@{appPath}/core/mycustom\"\n            \"a1\": 1,\n            \"b2\": 2,\n            \"port\": 9001\n        }\n    ]\n</code>\n\n<p>\n    Initializing over config.js\n</p>\n<code class=\"language-javascript\">\n    module.exports = function (componet, di) {\n        \"use strict\";\n\n        component.set('custom-redis', {\n            a1: 1,\n            b1: 2,\n            filePath: di.load('@{appPath}/core/redis-cache')\n        });\n        // or\n        component.set('custom-redis', {\n            a1: 1,\n            b1: 2\n        }, di.load('@{appPath}/core/redis-cache'));\n\n        // or\n\n        component.set('custom-redis', {\n            a1: 1,\n            b1: 2\n        }, function myConstructor(config) {\n            this.config = config;\n        });\n    };\n</code>\n\n<h2 class=\"mv-h2\">\n    Example of component:\n    /app/core/redis-cache\n</h2>\n<code class=\"language-javascript\">\n    \"use strict\";\n\n    var di = require('mvcjs'),\n    Type = di.load('typejs'),\n    CacheInterface = di.load('interface/cache'),\n    error = di.load('error'),\n    redis = di.load('app/redis'), // this is not implemented in core its just an example\n    RedisCache;\n    /**\n    * @name MemoryCache\n    * @constructor\n    * @description\n    * Memory cache\n    */\n    RedisCache = CacheInterface.inherit({\n        config: Type.OBJECT\n    },{\n        _construct: function (config) {\n            // In case from top { a1: 1, b1: 2 }\n            this.config = config;\n        },\n        set: function RedisCache_set(key, value, ttl) {\n            if (!this.cache.hasOwnProperty(key) || this.cache[key] === null) {\n                redis.set(key, value);\n            } else {\n                return false;\n            }\n\n            if (Type.isNumber(ttl) && !isNaN(ttl) && ttl > 0) {\n                setTimeout(clearCache.bind(this), ttl);\n            } else {\n                setTimeout(clearCache.bind(this), this.ttl);\n            }\n\n            function clearCache() {\n                this.remove(key);\n            }\n\n            return true;\n        },\n        get: function RedisCache_getValue(key) {\n            return redis.get(key);\n        },\n        remove: function RedisCache_remove(key) {\n            redis.remove(key);\n        }\n    });\n\n    module.exports = RedisCache;\n</code>\n",
    "url": "/getting-started/components",
    "pageTitle": "Components - mvcjs nodejs framework",
    "pageDesc": "Components host a set of the so-called application components that provide different services for processing requests."
  },
  {
    "text": "<h1 class=\"mv-h1\">Logger</h1>\n<p>Logger is component in system, see more about <a href=\"/getting-started/components\"  class=\"mv-a\">components</a>.</p>\n\n<code class=\"language-javascript\">\n    \"components\": [\n    {\n    \"name\": \"core/logger\", // name of component\n    \"enabled\": true, // is logger enabled\n    \"write\": true, // should be written to disk ?\n    \"publish\": true, // publish to port 9001\n    \"console\": false, // log it in console\n    \"port\": 9001, // log publish port\n    \"file\": \"server.log\" // log file\n    },\n    ]\n</code>\n<h2 class=\"mv-h2\">Log displayed in iframe</h2>\n<iframe src=\"http://localhost:9001/\" class=\"mv-frame\"></iframe>\n<p>View logger in <a href=\"http://localhost:9001/\" target=\"_blank\" class=\"mv-a\">new page</a>. </p>\n<h2 class=\"mv-h2\">Logger hooks</h2>\n<p>Add logger hook in env config to store in db:</p>\n<code class=\"language-javascript\">\n    module.exports = function (componet, di) {\n    \"use strict\";\n    var viewLoader,\n    logger = componet.get('core/logger'),\n    loggerModel = di.load('@{modelsPath}/logger');\n    logger.addHook(loggerModel.save.bind(loggerModel));\n    }\n</code>\n\n<h2 class=\"mv-h2\">How to use logger ?</h2>\n<p>Load logger in to your controller/model/component</p>\n<code class=\"language-javascript\">\n    var di = require('mvcjs'), // mvcjs as node package\n    component = di.load('core/component'),\n    logger = component.get('core/logger');\n\n    /// eg. in your controller action\n    logger.print('Some message', {}, 'as many arguments as you want and it could be any type');\n</code>",
    "url": "/getting-started/logger",
    "pageTitle": "Logger - mvcjs nodejs framework",
    "pageDesc": "Logger is component in system, use logger to log components,models,controllers,services in sytem"
  }
]