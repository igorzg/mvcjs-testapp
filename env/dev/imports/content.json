[
  {
    "text": "<h1 class=\"mv-h1\">Routing tutorial</h1>\n\n<p class=\"mv-p\">\n\n    When Mvcjs starts processing a requested URL, the first step it takes is to parse the URL into a route\n    The route is then used to instantiate the corresponding controller action to handle the request.\n    This whole process is called routing.\n</p>\n\n<h2 class=\"mv-h2\">Routes</h2>\n\n<p class=\"mv-p\">\n    End users address actions through the so-called routes. A route is a string that consists of the following\n    parts: <br/>\n<ul class=\"mv-ul\">\n    <li> a controller ID: a string that uniquely identifies the controller among all controllers within the same\n        application (or the same module if the controller belongs to a module);\n    </li>\n    <li> an action ID: a string that uniquely identifies the action among all actions within the same\n        controller.\n    </li>\n</ul>\n<br/>\nRoutes take the following format:\n<span class=\"mv-command\">ControllerID/ActionID</span>\n\n</p>\n\n<h2 class=\"mv-h2\">Static routes</h2>\n<p>\n    All routes are executed in order as thy are defined!\n</p>\n<code class=\"language-javascript\">\n    router.add([\n        {\n            pattern: 'user/&lt;view:(\\\\d+)&gt;', // matches /user/1, /user/2\n            route: 'user/view' // controller user action view\n        },\n        {\n            pattern: 'home/&lt;action&gt;', // matches /home/index /home/contact\n            route: 'home/&lt;action&gt;' // controller home action any\n        },\n        {\n            pattern: 'contact', // matches /contact\n            route: 'home/contact' // controller home action contact\n        },\n        {\n            pattern: '&lt;controller&gt;/&lt;action&gt;', // matches /home/index /user/index /user/view\n            route: '&lt;controller&gt;/&lt;action&gt;' // controller any action any\n        },\n        {\n            pattern: 'user/&lt;action:(create|view|update|delete)&gt;', // matches /user/create /user/view /user/update /user/delete\n            route: 'user/&lt;action&gt;' // controller user action (create|view|update|delete)\n        },\n        {\n            pattern: 'user/&lt;action:(update|view|delete)&gt;/&lt;id:(\\\\d+)&gt;', // matches /user/update/5 /user/view/10 /user/delete/1000\n            route: 'user/&lt;action&gt;' // controller user action (update|view|delete)\n        }\n    ]);\n\n    router.add({\n        pattern: '/', // matches /\n        route: 'home/index' // controller home action index\n    });\n</code>\n<h2 class=\"mv-h2\">Dynamic routes</h2>\n<code class=\"language-javascript\">\n    router.add([\n        {\n            dynamic: true,\n            constructor: di.load('@{envPath}/dynamic-router')\n        }\n    ]);\n    router.add({\n        pattern: '/', // matches /\n        route: 'home/index' // controller home action index\n    });\n</code>\n<p>Dynamic router:</p>\n<code class=\"language-javascript\">\n    var di = require('mvcjs'),\n    RouteRuleInterface = di.load('interface/routeRule'),\n    menuModel = di.load('@{modelsPath}/menu'),\n    Promise = di.load('promise'),\n    MenuRoute;\n\n    MenuRoute = RouteRuleInterface.inherit({}, {\n        parseRequest: function(method, route) {\n            return new Promise(function (resolve, reject) {\n                menuModel.findOne({link: route.pathname}, function(err, data) {\n                    if (!!data && !!data.route) {\n                        resolve([data.route, route.query]); // route must be returned as array format ['home/index', {id: 1}] string, object params\n                    }else {\n                        resolve(false);\n                    }\n                });\n            });\n        },\n        createUrl: function(route, params) {\n            if (route === 'custom/route') { // match route\n                if (params.link) {\n                    return params.link; // return custom link from params\n                }\n            }\n            return false;\n            /*\n                Eg:\n                {\n                    \"title\": \"Routing\",\n                    \"link\": \"/getting-started/routing\",\n                    \"route\": \"custom/route\", // controller custom action route\n                    \"blank\": false\n                }\n            */\n        }\n    });\n\n    module.exports = MenuRoute;\n</code>",
    "url": "/guide/routing",
    "pageTitle": "Routing component - mvcjs nodejs framework",
    "pageDesc": "Tutorial for routing component,  when Mvcjs starts processing a requested URL, the first step it takes is to parse the URL"
  },
  {
    "text": "<h1 class=\"mv-h1\">Components</h1>\n\n<p class=\"mv-p\">\n    Components host a set of the so-called application components that provide different services for processing\n    requests. <br/>\n    For example, the core/router component is responsible for routing Web requests to appropriate controllers;\n    the core/db component provides mogodb services; and so on. <br/>\n    All components are <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\" class=\"mv-a\"\n                          target=\"_blank\">singleton</a>\n    objects in system.\n</p>\n\n<h2 class=\"mv-h2\">Core Components</h2>\n<ul class=\"mv-ul\">\n    <li>core/logger</li>\n    <li>core/router</li>\n    <li>core/favicon</li>\n    <li>core/view</li>\n    <li>core/assets</li>\n    <li>db/mongo</li>\n    <li>cache/memory</li>\n</ul>\n<h2 class=\"mv-h2\">Bootstrapping Components</h2>\n\n<p class=\"mv-p\">\n    As mentioned above, an application component will only be instantiated when it is being accessed the first\n    time.<br/>\n    Usually that is happening at bootstrapping application but thy can be bootstrapped at some controller\n    model.<br/>\n    You can always override default core component and provide own implementation of some core component.\n</p>\n\n<p class=\"mv-p\">\n    Bootstraping over environment.json\n</p>\n<code class=\"language-javascript\">\n    \"components\": [\n        {\n            \"name\": \"core/logger\",\n            \"enabled\": true,\n            \"write\": true,\n            \"publish\": true,\n            \"console\": false,\n            \"port\": 9001,\n            \"file\": \"server.log\"\n        },\n        {\n            \"name\": \"core/router\",\n            \"errorRoute\": \"core/error\"\n        },\n        {\n            \"name\": \"core/favicon\",\n            \"path\": \"@{basePath}/favicon.ico\"\n        },\n        {\n            \"name\": \"core/view\",\n            \"themes\": \"@{appPath}/themes/\",\n            \"views\": \"@{appPath}/views/\",\n            \"theme\": \"default\",\n            \"cache\": false\n        },\n        {\n            \"name\": \"core/assets\",\n            \"path\": \"@{basePath}/storage/\",\n            \"hook\": \"^\\\\/assets\"\n        },\n        {\n            \"name\": \"db/mongo\",\n            \"connection\": \"mongodb://localhost/testdb\"\n        }\n    ]\n</code>\n<p class=\"mv-p\">\n    Providing custom core implementation\n</p>\n<code class=\"language-javascript\">\n    \"components\": [\n        {\n            \"name\": \"core/logger\",\n            \"filePath\": \"@{appPath}/core/my-logger-implementation\"\n            \"enabled\": true,\n            \"write\": true,\n            \"publish\": true,\n            \"console\": false,\n            \"port\": 9001,\n            \"file\": \"server.log\"\n        }\n    ]\n</code>\n\n<h2 class=\"mv-h2\">\n    Creating custom component\n</h2>\n<p>\n    Component can be initialized to system in two ways over environment.json<br />\n    Your component must be function type!\n</p>\n<code class=\"language-javascript\">\n    \"components\": [\n        {\n            \"name\": \"app/core/custom\",\n            \"filePath\": \"@{appPath}/core/mycustom\"\n            \"a1\": 1,\n            \"b2\": 2,\n            \"port\": 9001\n        }\n    ]\n</code>\n\n<p>\n    Initializing over config.js\n</p>\n<code class=\"language-javascript\">\n    module.exports = function (componet, di) {\n        \"use strict\";\n\n        component.set('custom-redis', {\n            a1: 1,\n            b1: 2,\n            filePath: di.load('@{appPath}/core/redis-cache')\n        });\n        // or\n        component.set('custom-redis', {\n            a1: 1,\n            b1: 2\n        }, di.load('@{appPath}/core/redis-cache'));\n\n        // or\n\n        component.set('custom-redis', {\n            a1: 1,\n            b1: 2\n        }, function myConstructor(config) {\n            this.config = config;\n        });\n    };\n</code>\n\n<h2 class=\"mv-h2\">\n    Example of component:\n    /app/core/redis-cache\n</h2>\n<code class=\"language-javascript\">\n    \"use strict\";\n\n    var di = require('mvcjs'),\n    Type = di.load('typejs'),\n    CacheInterface = di.load('interface/cache'),\n    error = di.load('error'),\n    redis = di.load('app/redis'), // this is not implemented in core its just an example\n    RedisCache;\n    /**\n    * @name MemoryCache\n    * @constructor\n    * @description\n    * Memory cache\n    */\n    RedisCache = CacheInterface.inherit({\n        config: Type.OBJECT\n    },{\n        _construct: function (config) {\n            // In case from top { a1: 1, b1: 2 }\n            this.config = config;\n        },\n        set: function RedisCache_set(key, value, ttl) {\n            if (!this.cache.hasOwnProperty(key) || this.cache[key] === null) {\n                redis.set(key, value);\n            } else {\n                return false;\n            }\n\n            if (Type.isNumber(ttl) && !isNaN(ttl) && ttl > 0) {\n                setTimeout(clearCache.bind(this), ttl);\n            } else {\n                setTimeout(clearCache.bind(this), this.ttl);\n            }\n\n            function clearCache() {\n                this.remove(key);\n            }\n\n            return true;\n        },\n        get: function RedisCache_getValue(key) {\n            return redis.get(key);\n        },\n        remove: function RedisCache_remove(key) {\n            redis.remove(key);\n        }\n    });\n\n    module.exports = RedisCache;\n</code>\n",
    "url": "/guide/components",
    "pageTitle": "Components - mvcjs nodejs framework",
    "pageDesc": "Components host a set of the so-called application components that provide different services for processing requests."
  },
  {
    "text": "<h1 class=\"mv-h1\">Logger</h1>\n<p>Logger is component in system, see more about <a href=\"/guide/components\"  class=\"mv-a\">components</a>.</p>\n\n<code class=\"language-javascript\">\n    \"components\": [\n    {\n    \"name\": \"core/logger\", // name of component\n    \"enabled\": true, // is logger enabled\n    \"write\": true, // should be written to disk ?\n    \"publish\": true, // publish to port 9001\n    \"console\": false, // log it in console\n    \"port\": 9001, // log publish port\n    \"file\": \"server.log\" // log file\n    },\n    ]\n</code>\n<h2 class=\"mv-h2\">Log displayed in iframe</h2>\n<iframe src=\"http://localhost:9001/\" class=\"mv-frame\"></iframe>\n<p>View logger in <a href=\"http://localhost:9001/\" target=\"_blank\" class=\"mv-a\">new page</a>. </p>\n<h2 class=\"mv-h2\">Logger hooks</h2>\n<p>Add logger hook in env config to store in db:</p>\n<code class=\"language-javascript\">\n    module.exports = function (componet, di) {\n    \"use strict\";\n    var viewLoader,\n    logger = componet.get('core/logger'),\n    loggerModel = di.load('@{modelsPath}/logger');\n    logger.addHook(loggerModel.save.bind(loggerModel));\n    }\n</code>\n\n<h2 class=\"mv-h2\">How to use logger ?</h2>\n<p>Load logger in to your controller/model/component</p>\n<code class=\"language-javascript\">\n    var di = require('mvcjs'), // mvcjs as node package\n    component = di.load('core/component'),\n    logger = component.get('core/logger');\n\n    /// eg. in your controller action\n    logger.print('Some message', {}, 'as many arguments as you want and it could be any type');\n</code>",
    "url": "/guide/logger",
    "pageTitle": "Logger - mvcjs nodejs framework",
    "pageDesc": "Logger is component in system, use logger to log components,models,controllers,services in sytem"
  },
  {
    "text": "<div class=\"mv-content-left\">\n    <h1 class=\"mv-h1\">Controllers</h1>\n    <h2 class=\"mv-h2\">Features</h2>\n    <ul class=\"mv-ul\">\n        <li>Controllers can be inherited.</li>\n        <li>Controllers are loaded only once on request when is needed.</li>\n        <li>Controllers are instantiated on each request.</li>\n        <li>Easy to test.</li>\n    </ul>\n\n    <h2 class=\"mv-h2\">Methods which can be called in controllers</h2>\n    <ul class=\"mv-ul\">\n        <li><a href=\"#stopChain\" class=\"mv-a\">stopChain();</a> </li>\n        <li><a href=\"#renderFile\" class=\"mv-a\">renderFile(path {string}, locals {object});</a> -> return in action</li>\n        <li><a href=\"#render\" class=\"mv-a\">render(template {string}, locals {object}, escape {boolean});</a> -> return in action</li>\n        <li><a href=\"#redirect\" class=\"mv-a\">redirect(route {string}, params {object});</a> <em>-> return in action</em></li>\n        <li><a href=\"#forward\" class=\"mv-a\">forward(route {string}, params {object});</a> <em>-> return in action</em></li>\n        <li><a href=\"#createUrl\" class=\"mv-a\">createUrl(route {string}, params {object});</a> </li>\n        <li><a href=\"#onEnd\" class=\"mv-a\">onEnd(callback (function));</a> <em>-> request end event</em></li>\n        <li><a href=\"#addHeader\" class=\"mv-a\">addHeader(name {string}, value {string});</a> <em>-> response</em></li>\n        <li><a href=\"#hasHeader\" class=\"mv-a\">hasHeader(name {string});</a> <em>-> response</em></li>\n        <li><a href=\"#getHeaders\" class=\"mv-a\">getHeaders();</a> <em>-> response</em></li>\n        <li><a href=\"#getMethod\" class=\"mv-a\">getMethod();</a> <em>-> request</em></li>\n        <li><a href=\"#getRequestHeader\" class=\"mv-a\">getRequestHeader(name {string}); </a><em>-> request</em></li>\n        <li><a href=\"#getRequestHeaders\" class=\"mv-a\">getRequestHeaders(); </a><em>-> request</em></li>\n        <li><a href=\"#isHeaderCacheUnModified\" class=\"mv-a\">isHeaderCacheUnModified();</li>\n        <li><a href=\"#sendNoChange\" class=\"mv-a\">sendNoChange();</a></li>\n        <li><a href=\"#getParsedUrl\" class=\"mv-a\">getParsedUrl();</a></li>\n        <li>has(actionName {string}); <em>internally used by framework</em></li>\n        <li>get(actionName {string}); <em>internally used by framework</em></li>\n    </ul>\n    <p class=\"mv-p\">\n        As you can see on image in right side, app structure is pretty clear. <br/>\n    </p>\n    <h2 class=\"mv-h2\">Core controller example</h2>\n    <p class=\"mv-p\">\n        <code class=\"language-javascript\">\n            var di = require('mvcjs'), // mvcjs as node package\n            Type = di.load('typejs'),\n            Controller = di.load('code/controller'),\n            widgetHooks = di.load('@{code}/widget-hook'),\n            CoreController;\n\n            // load widget menu, as menu-hook alias and for menu-hook alias use hook method\n            widgetHooks.load('menu', 'menu-hook', 'hook');\n            /**\n            * @license Mit Licence 2014\n            * @since 0.0.1\n            * @author Igor Ivanovic\n            * @name CoreController\n            *\n            * @constructor\n            * @description\n            * Core controller , most controllers are inherited from code controller\n            */\n            CoreController = Controller.inherit({\n                locals: Type.OBJECT,\n                menu: Type.ARRAY\n            }, {\n                /**\n                * @since 0.0.1\n                * @author Igor Ivanovic\n                * @method CoreController#_construct\n                *\n                * @description\n                * On construct set some defaults\n                */\n                _construct: function() {\n                    this.locals = {\n                        scripts: [],\n                        brand: 'MVCJS',\n                        pageTitle: 'Mvcjs nodejs framework',\n                        pageDesc: 'Mvcjs fast, opinionated lightweight mvc framework for Node.js inspired by Yii framework'\n                    };\n                    this.menu = [];\n                },\n                /**\n                * @since 0.0.1\n                * @author Igor Ivanovic\n                * @method CoreController#beforeEach\n                *\n                * @description\n                * This is executed before each action\n                * @return {object} Promise\n                */\n                beforeEach: function Core_beforeEach() {\n                    // handle hooks\n                    return widgetHooks.handle(['menu-hook']); // run menu alias\n                },\n                /**\n                * @since 0.0.1\n                * @author Igor Ivanovic\n                * @method CoreController#action_error\n                *\n                * @description\n                * Error handler for application\n                * @return {*|string}\n                */\n                action_error: function Core_error(error) {\n                    this.locals.pageTitle = 'Error - mvcjs nodejs framework';\n                    this.locals.text = error.toString().replace(/\\\\n/g, '\\n');\n                    return this.renderFile('home/error', this.locals);\n                }\n            });\n            module.exports = CoreController;\n        </code>\n    </p>\n    <h2 class=\"mv-h2\">Home controller example inherited by code</h2>\n    <p class=\"mv-p\">\n        <code class=\"language-javascript\">\n            var di = require('mvcjs'), // mvcjs as node package\n            CoreController = di.load('@{controllersPath}/code'),\n            contentModel = di.load('@{modelsPath}/content'),\n            code = di.load('code'),\n            Promise = di.load('promise'),\n            HomeController;\n            /**\n            * @license Mit Licence 2014\n            * @since 0.0.1\n            * @author Igor Ivanovic\n            * @name HomeController\n            *\n            * @constructor\n            * @description\n            * Home controller is responsible for home actions\n            */\n            HomeController = CoreController.inherit({}, {\n                /**\n                * @since 0.0.1\n                * @author Igor Ivanovic\n                * @method HomeController#action_index\n                *\n                * @description\n                * Index action request\n                * @return {*|string}\n                */\n                action_index: function HomeController_action_index(params, data) {\n                    var packageJson = JSON.parse(di.readFileSync('@{basePath}/package.json'));\n                    this.locals.scripts.push({\n                        src: 'https://buttons.github.io/buttons.js',\n                        id: 'github-bjs',\n                        async: true\n                    });\n                    if (packageJson && packageJson.dependencies && packageJson.dependencies.mvcjs) {\n                        this.locals.version = packageJson.dependencies.mvcjs;\n                    }\n                    return this.renderFile('home/index', this.locals);\n                },\n\n                /**\n                * @since 0.0.1\n                * @author Igor Ivanovic\n                * @method HomeController#beforeEach\n                *\n                * @description\n                * This is executed before each action\n                * @return {object} Promise\n                */\n                beforeEach: function HomeController_beforeEach() {\n                    var _parentBeforeEachPromise = this._super();\n                    this.locals.scripts.push({\n                        src: '/assets/js/prism.js'\n                    });\n                    return _parentBeforeEachPromise;\n                },\n                /**\n                * @since 0.0.1\n                * @author Igor Ivanovic\n                * @method HomeController#before_content\n                *\n                * @description\n                * Before content action do some data handling\n                * @return {object} Promise\n                */\n                before_content: function HomeController_before_content(params, data) {\n                    var pathName = this._request.parsedUrl.pathname;\n                    return new Promise(function(resolve, reject) {\n                        contentModel.findOne({url: pathName}, function (err, data) {\n                            if (err) {\n                                reject(err)\n                            } else {\n                                resolve(data);\n                            }\n                        });\n                    });\n                },\n                /**\n                * @since 0.0.1\n                * @author Igor Ivanovic\n                * @method HomeController#action_content\n                *\n                * @description\n                * Content action is responsible for displaying dynamic content\n                * @return {*|string}\n                */\n                action_content: function HomeController_content(params, data) {\n                    if (data) {\n                        if (data.text) {\n                            this.locals.content = data.text;\n                        }\n                        if (data.pageTitle) {\n                            this.locals.pageTitle = data.pageTitle;\n                        }\n                        if (data.pageDesc) {\n                            this.locals.pageDesc = data.pageDesc;\n                        }\n                    }\n                    return this.renderFile('home/content', this.locals);\n                }\n            });\n\n            module.exports = HomeController;\n        </code>\n    </p>\n\n    <h3 class=\"mv-h3\" id=\"stopChain\">stopChain();</h3>\n    <p class=\"mv-p\">\n        Stop execution of promise chain\n    </p>\n    <code class=\"language-javascript\">\n        {\n            before_content: function(params, data) {\n                if (params.someLogic) {\n                    this.stopChain();\n                    return 'SOME-DATA';\n                }\n            },\n            action_content: function (params, data) {\n                // this will not be executed when some logic is there\n                // instead 'SOME-DATA' will be rendered in that case\n                return this.renderFile('home/content', this.locals);\n            }\n        }\n    </code>\n    <h3 class=\"mv-h3\" id=\"renderFile\">renderFile(path {string}, locals {object});</h3>\n    <p class=\"mv-p\">\n        Render file from path eg: 'home/content' will try render first from '@{themesPath}/{{theme}}/home/content' and if fails\n        then will try render file from  '@{viewsPath}/home/content' if that fails error 500 will be thrown\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_content: function (params, data) {\n                return this.renderFile('home/content', this.locals);\n            }\n        }\n    </code>\n\n    <h3 class=\"mv-h3\" id=\"render\">render(template {string}, locals {object}, escape {boolean});</h3>\n    <p class=\"mv-p\">\n        Render template.\n        Param template is string to be compiled\n        Param locals is object which is passed as data to view handler\n        Param escape is boolean to escape html or not to escape\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_content: function (params, data) {\n                this.locals.title = 'from local';\n                this.locals.id = params.id;\n                return this.render('My template {{title}} {{id}}', this.locals, true);\n            }\n        }\n    </code>\n\n\n    <h3 class=\"mv-h3\" id=\"redirect\">redirect(route {string}, params {object});</h3>\n    <p class=\"mv-p\">\n        Redirect to different route in case below will redirect to /home/index\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_permanent: function () {\n                this.redirect(this.createUrl('home/index', {id: 1}));\n            },\n            action_temporary: function () {\n                this.redirect(this.createUrl('home/index', {id: 1}), true);\n            }\n        }\n    </code>\n\n    <h3 class=\"mv-h3\" id=\"forward\">forward(route {string}, params {object});</h3>\n    <p class=\"mv-p\">\n        Forward to different route.\n        Forward must be returned to promise chain!\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_user_view: function () {\n                return this.forward('user/login', {hash: 'something'});\n            }\n        }\n    </code>\n\n    <h3 class=\"mv-h3\" id=\"createUrl\">createUrl(route {string}, params {object});</h3>\n    <p class=\"mv-p\">\n        Create route from defined routes.\n        So if you add route like {pattern: 'user/&lt;id:(\\\\d+)&gt;', route: 'user/view'}\n        And you call this.createUrl('user/view', {id: 1}) will generate /user/1 url\n    </p>\n    <code class=\"language-javascript\">\n        {\n            // {pattern: 'user/&lt;id:(\\\\d+)&gt;', route: 'user/view'}\n            action_view: function () {\n                var url = this.createUrl('user/view', {id: 1});\n                // /user/1\n                this.locals.url = url;\n                return this.renderFile('home/index', this.locals);\n            }\n        }\n    </code>\n\n\n    <h3 class=\"mv-h3\" id=\"onEnd\">onEnd(callback {function});</h3>\n    <p class=\"mv-p\">\n        This is request.on('end', callback);\n        This is destroyed with request itself\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_view: function () {\n                this.onEnd(function() {\n                    // do some destroy if you need\n                });\n                return this.renderFile('home/index', this.locals);\n            }\n        }\n    </code>\n\n    <h3 class=\"mv-h3\" id=\"addHeader\">addHeader(name {string}, value {string});</h3>\n    <p class=\"mv-p\">\n        Add response header eg. Content-type\n        By default content type is text/html so you don't need to provide content type header\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_view: function () {\n                this.addHeader('Content-type', 'application/javascript'); // override content type\n                this.stopChain(); // stop chain for eg. after each function\n                return 'function exec(){ return 1; }';\n            }\n        }\n    </code>\n\n    <h3 class=\"mv-h3\" id=\"hasHeader\">hasHeader(name {string});</h3>\n    <p class=\"mv-p\">\n        Check if response header is al ready present\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_view: function () {\n                this.hasHeader('Content-type'); // false\n                this.addHeader('Content-type', 'application/javascript'); // override content type\n                this.hasHeader('Content-type'); // true\n            }\n        }\n    </code>\n\n    <h3 class=\"mv-h3\" id=\"getHeaders\">getHeaders();</h3>\n    <p class=\"mv-p\">\n        Return all response headers\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_parse: function () {\n                this.addHeader('Content-type', 'application/javascript');\n                var requestHeaders = this.getHeaders();\n            }\n        }\n    </code>\n\n    <h3 class=\"mv-h3\" id=\"getMethod\">getMethod();</h3>\n    <p class=\"mv-p\">\n        Return request method\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_parse: function () {\n                this.getMethod() // eg: 'GET'\n            }\n        }\n    </code>\n\n\n    <h3 class=\"mv-h3\" id=\"getRequestHeader\">getRequestHeader(name {string});</h3>\n    <p class=\"mv-p\">\n        Return request header\n    </p>\n    <code class=\"language-javascript\">\n\n        function cookieParser(cookie) {\n            return cookie.split(';').map(function(item) {\n                var i = item.split('=');\n                return {\n                    key: i.shift(),\n                    value: i.shift()\n                }\n            });\n        }\n\n        {\n            action_parse: function () {\n                var cookie = this.getRequestHeader('Cookie');\n                var parsed = cookieParser(cookie);\n                /*  eg: __atuvc=6%7C48; session_id=bec2560b3f30550ddb6450cbc09981d7\n                    [\n                        {\n                            key: '__atuvc',\n                            value: '6%7C48'\n                        },\n                        {\n                            key: 'session_id',\n                            value: 'bec2560b3f30550ddb6450cbc09981d7'\n                        }\n                    ]\n                */\n\n            }\n        }\n    </code>\n\n    <h3 class=\"mv-h3\" id=\"getRequestHeaders\">getRequestHeaders();</h3>\n    <p class=\"mv-p\">\n        Return all request headers\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_parse: function () {\n                var requestHeaders = this.getRequestHeaders();\n            }\n        }\n    </code>\n\n    <h3 class=\"mv-h3\" id=\"isHeaderCacheUnModified\">isHeaderCacheUnModified();</h3>\n    <p class=\"mv-p\">\n        Check if cache is un modified\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_parse: function () {\n                if (this.isHeaderCacheUnModified()) {\n                   return this.sendNoChange(); /// 304 response\n                }\n            }\n        }\n    </code>\n\n    <h3 class=\"mv-h3\" id=\"sendNoChange\">sendNoChange();</h3>\n    <p class=\"mv-p\">\n        Return 304 response\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_parse: function () {\n                return this.sendNoChange(); /// 304 response\n            }\n        }\n    </code>\n\n    <h3 class=\"mv-h3\" id=\"getParsedUrl\">getParsedUrl();</h3>\n    <p class=\"mv-p\">\n        Return parsed url <a href=\"http://nodejs.org/api/url.html\" target=\"_blank\">url api</a>\n    </p>\n    <code class=\"language-javascript\">\n        {\n            action_parse: function () {\n                var parsed_url = this.getParsedUrl();\n                parsed_url.pathname; // eg. '/home/index',\n                parsed_url.query; // eg. {id: 1, test: 'b'},\n            }\n        }\n    </code>\n</div>\n<div class=\"mv-content-right\">\n    <img src=\"/assets/image/app.png\"/>\n</div>",
    "url": "/guide/controllers",
    "pageTitle": "Controllers - mvcjs nodejs framework",
    "pageDesc": "Logger is component in system, use logger to log components,models,controllers,services in sytem"
  },
  {
    "text": "<h1 class=\"mv-h1\">Models</h1>\n<p class=\"mv-p\">\n    db/mongo is responsible for connection to mongodb\n    Mongoose lib is used to handle models\n</p>\n<h2 class=\"mv-h2\">Methods db/mongo</h2>\n<ul class=\"mv-ul\">\n    <li>mongo.schema(); -> mongoose schema</li>\n    <li>mongo.model(); -> mongoose model</li>\n</ul>\n<h2 class=\"mv-h2\">Content model example</h2>\n<p class=\"mv-p\">\n    <code class=\"language-javascript\">\n        \"use strict\";\n        var di = require('mvcjs'),\n        Type = di.load('typejs'),\n        component = di.load('core/component'),\n        mongo = component.get('db/mongo'),\n        ContentModel;\n\n        /**\n        * @license Mit Licence 2014\n        * @since 0.0.1\n        * @author Igor Ivanovic\n        * @name ContentModel\n        *\n        * @constructor\n        * @description\n        * Content Model is used for CRUD to content collection\n        */\n        ContentModel = Type.create({\n        model: Type.FUNCTION\n        },\n            {\n            _construct: function() {\n\n                var schema = mongo.schema({\n                    created: Date,\n                    text: String,\n                    pageTitle: String,\n                    pageDesc: String,\n                    url: String\n                }, {\n                    collection: 'content'\n                });\n                this.model = mongo.model('Content', schema);\n            },\n            /**\n            * @since 0.0.1\n            * @author Igor Ivanovic\n            * @method ContentModel#import\n            *\n            * @description\n            * Import documents from array\n            */\n            importData: function(docs) {\n                var that = this;\n                this.model.collection.drop(function() {\n                    docs.forEach(function importData(item) {\n                        that.save(item.text, item.url, item.pageTitle, item.pageDesc);\n                    });\n                });\n            },\n            /**\n            * @since 0.0.1\n            * @author Igor Ivanovic\n            * @method ContentModel#find\n            *\n            * @description\n            * Save menu\n            */\n            findOne: function () {\n                return this.model.findOne.apply(this.model, arguments);\n            },\n            /**\n            * @since 0.0.1\n            * @author Igor Ivanovic\n            * @method ContentModel#find\n            *\n            * @description\n            * Save menu\n            */\n            find: function () {\n                return this.model.find.apply(this.model, arguments);\n            },\n            /**\n            * @since 0.0.1\n            * @author Igor Ivanovic\n            * @method ContentModel#save\n            *\n            * @description\n            * Save menu\n            */\n            save: function(text, url, pageTitle, pageDesc) {\n                return this.model.create({\n                    text: text,\n                    url: url,\n                    pageTitle: pageTitle,\n                    pageDesc: pageDesc,\n                    created: new Date\n                });\n            }\n        });\n        module.exports = new ContentModel;\n    </code>\n</p>",
    "url": "/guide/models",
    "pageTitle": "Models - mvcjs nodejs framework",
    "pageDesc": "Mongo db adapter built in in framework, db/mongo based on mongoose is responsible for connection to mongodb"
  },
  {
    "text":"<h1 class=\"mv-h1\">Views</h1>\n<p class=\"mv-p\">\n    By default templates are served from @{viewsPath} if theme is not set in config.js <br />\n    You can set theme for you application if you need it you can do it in config.js. <br />\n    If template is setted framework will search first template in @{themesPath}/THEME_NAME/ <br />\n    And if fails to find template there it will search it in  @{viewsPath} and if fails there  <br />\n    framework will throw error 500 with explanation.\n</p>\n<ul class=\"mv-p\">\n    <li>View filters|tags can be extended at config.js. </li>\n    <li>Swigjs is responsible for processing and compiling views.</li>\n    <li>View <a href=\"http://paularmstrong.github.io/swig/docs/\" target=\"_blank\" class=\"mv-a\">swig js api</a></li>\n    <li>Swig js is javascript implementation of twig templating engine.</li>\n</ul>\n<h2 class=\"mv-h2\">View example</h2>\n<p class=\"mv-p\">\n    <code class=\"language-twig\">\n        {% extends \"layouts/default\" %}\n        {% block content %}\n        &lt;div class=\"mv-content mv-cf\"&gt;{{ content | safe }}&lt;/div&gt;\n        {% parent %}\n        {% endblock %}\n    </code>\n</p>\n<h2 class=\"mv-h2\">Extending templating engine example</h2>\n<p class=\"mv-p\">\n    <p class=\"mv-p\">\n        Define extension, for example we want to do widget extension\n    </p>\n    <code class=\"language-javascript\">\n        /**\n        * @license Mit Licence 2014\n        * @since 0.0.1\n        * @author Igor Ivanovic\n        * @name widget.js\n        * @function\n        * @description\n        * Is used to extend view so we can support widgets\n        */\n        module.exports = function (componet, di) {\n\n            var viewLoader = componet.get('core/view'),\n            error = di.load('error');\n\n            // do widget stuff\n            viewLoader.setExtension('widget', function (name) {\n                try {\n                    return di.load('@{widgets}/' + name).render();\n                } catch (e) {\n                    throw new error.HttpError(500, {name: name}, 'Problem with loading widget', e);\n                }\n            });\n            // set tag\n            viewLoader.setTag('widget', parse, compile, false, false);\n            // parse\n            function parse(str, line, parser, types, options) {\n                var matched = false;\n                parser.on('*', function (token) {\n                    if (matched) {\n                        throw new Error('Unexpected token ' + token.match + '.');\n                    }\n                    matched = true;\n                    return true;\n                });\n                return true;\n            }\n            // compile\n            function compile(compiler, args, content, parents, options, blockName) {\n                return '_output += _ext.widget(' + args[0] + ');';\n            }\n        };\n    </code>\n<h3 class=\"mv-h3\">Config.js</h3>\n<p class=\"mv-p\">\n   Hook extension in config\n</p>\n<code class=\"language-javascript\">\n    /**\n    * @license Mit Licence 2014\n    * @since 0.0.1\n    * @author Igor Ivanovic\n    * @name config.js\n    * @function\n    * @description\n    * Is used to do configuration at bootstrap\n    */\n    module.exports = function (componet, di) {\n        \"use strict\";\n        var viewLoader;\n    \n        // attach core path\n        di.setAlias('core', '@{appPath}/core');\n        // set widgets path\n        di.setAlias('widgets', '@{viewsPath}/widgets');\n    \n        // set theme for view loader\n        viewLoader = componet.get('core/view');\n        viewLoader.setTheme('default');\n      \n        di.load('@{envPath}/widget')(componet, di);\n    };\n</code>\n</p>\n<h3 class=\"mv-h3\">Menu widget logic</h3>\n<p class=\"mv-p\">\n    Menu widget logic in /apppath/views/widgets/menu/index.js\n</p>\n<code class=\"language-javascript\">\n    /**\n    * Created by igi on 25/12/14.\n    */\n    var di = require('mvcjs'),\n    Type = di.load('typejs'),\n    modelMenu = di.load('@{modelsPath}/menu'),\n    component = di.load('core/component'),\n    error = di.load('error'),\n    view = component.get('core/view'),\n    logger = component.get('core/logger'),\n    MenuWidget;\n\n    /**\n    * @license Mit Licence 2014\n    * @since 0.0.1\n    * @author Igor Ivanovic\n    * @name MenuWidget\n    *\n    * @constructor\n    * @description\n    * Menu widget is responsible to handle data\n    */\n    MenuWidget = Type.create({\n        model: Type.OBJECT,\n        locals: Type.OBJECT\n    },\n        {\n        _construct: function MenuWidget_construct() {\n            this.model = modelMenu;\n            this.locals = {};\n        },\n        /**\n        * @since 0.0.1\n        * @author Igor Ivanovic\n        * @method MenuWidget#hook\n        *\n        * @description\n        * Hook data to the menu widget\n        * Fire this before template compiling\n        */\n        hook: function MenuWidget_hook(resolve) {\n            this.model.find(function(e, data) {\n                logger.print('MenuWidget.hook', data, e);\n                if (!!e) {\n                    throw new error.HttpError(500, {data: data}, 'Problem with resolving menu widget data', e);\n                }\n                this.locals.menu = data;\n                resolve(data);\n            }.bind(this));\n        },\n        /**\n        * @since 0.0.1\n        * @author Igor Ivanovic\n        * @method MenuWidget#render\n        *\n        * @description\n        * This is fired by view extension\n        * It will render what ever you return here\n        */\n        render: function MenuWidget_render() {\n            var template = view.renderFile('widgets/menu/view', this.locals);\n            logger.print('MenuWidget.parse', template, this.locals);\n            return template;\n        }\n    }\n    );\n    \n    module.exports = new MenuWidget;\n</code>\n</p>\n<h3 class=\"mv-h3\">Menu widget template</h3>\n<p class=\"mv-p\">\n    Menu widget template in /apppath/views/widgets/menu/view.twig\n</p>\n<code class=\"language-twig\">\n    {% if menu.length > 0 %}\n    &lt;ul class=\"mv-menu\"&gt;\n        {% for i in menu %}\n        &lt;li&gt;&lt;a href=\"{{i.link}}\" {% if i.blank %}target=\"_blank\"{% endif %}&gt;{{i.title}}&lt;/a&gt;&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n    {% endif %}\n</code>\n</p>     \n<h3 class=\"mv-h3\">Template with widget example</h3>\n<p class=\"mv-p\">\n    <code class=\"language-twig\">\n        &lt;!DOCTYPE html&gt;\n        &lt;html&gt;\n        &lt;head lang=\"en\"&gt;\n            &lt;meta charset=\"UTF-8\"&gt;\n            &lt;link href=\"/assets/css/main.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n            {% for item in scripts %}\n            &lt;script src=\"{{ item.src }}\" {% if item.id %}id=\"{{ item.id }}\"{% endif %}  {% if item.async %}async{% endif %} {% if item.defer %}defer{% endif %}&gt;&lt;/script&gt;\n            {% endfor %}\n            &lt;title&gt;{{pageTitle}}&lt;/title&gt;\n            &lt;meta name=\"description\" content=\"{{pageDesc}}\" /&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n        &lt;header class=\"mv-head\"&gt;\n            &lt;span class=\"mv-title fa fa-lg fa-code\"&gt;{{brand}}&lt;/span&gt;\n            {% widget 'menu' %}\n        &lt;/header&gt;\n        {% block content %}{% endblock %}\n        &lt;/body&gt;\n        &lt;/html&gt;\n    </code>\n</p>",
    "url": "/guide/views",
    "pageTitle": "Views - mvcjs nodejs framework",
    "pageDesc": "Swigjs is responsible for processing and compiling views."
  },
  {
    "text": "<h1 class=\"mv-h1\">TDD - Test driven development</h1>\n<p class=\"mv-p\">\n    It is very important to test your application correctly <br/>\n    By my opinion application should have unit tests, integration tests and end to end tests <br/>\n</p>\n<h2 class=\"mv-h2\">What is integration test ?</h2>\n<p class=\"mv-p\">\n    An integration test is used to demonstrate that different pieces of the system work together.<br/>\n    The integration tests do a more convincing job of demonstrating how system works.\n</p>\n<h2 class=\"mv-h2\">What is unit test ?</h2>\n<p class=\"mv-p\">\n    A unit test is a test written by the programmer to verify that a relatively small piece of code is doing what <br/>\n    it is intended to do. They are narrow in scope, they should be easy to write and execute, and their effectiveness\n    <br/>\n    depends on what the programmer considers to be useful.\n</p>\n<h2 class=\"mv-h2\">What is e2e test ?</h2>\n<p class=\"mv-p\">\n    End-to-end testing used to test how flow of an application is performing as designed from start to finish. <br/>\n    The purpose of carrying out end-to-end tests is to identify system dependencies and to ensure that the <br/>\n    right information is passed between various system components and systems.\n</p>\n<h2 class=\"mv-h2\">Unit test example</h2>\n<p class=\"mv-p\">See controller example under controllers section</p><code class=\"language-javascript\">\n    describe('controllers/core', function () {\n        var di,\n            Core,\n            Type,\n            widgetHooks = [],\n            widgetHook = {\n                load: function (a, b, c) {\n                    widgetHooks.push({\n                        name: a,\n                        alias: b,\n                        method: c\n                    });\n                },\n                handle: function () {}\n            };\n\n        beforeEach(function () {\n            di = require('mvcjs');\n            di.setAlias('cp', __dirname + '/../../app/controllers/');\n            Type = di.load('typejs');\n            Core = di.mock('@{cp}/core', {\n                'typejs': Type,\n                'core/controller': {\n                    inherit: function () {\n                        return Type.create.apply(Type, arguments);\n                    }\n                },\n                '@{core}/widget-hook': widgetHook\n            });\n        });\n\n        it('construct', function () {\n            var api = {};\n            var controller = new Core(api);\n            expect(controller.locals.scripts.length).toBe(0);\n            expect(controller.locals.brand).toBe('MVCJS');\n            expect(controller.locals.pageTitle).toBe('Mvcjs nodejs framework');\n            expect(controller.locals.pageDesc).toBe('Mvcjs fast, opinionated lightweight mvc framework for Node.js inspired by Yii framework');\n            expect(controller.menu.length).toBe(0);\n        });\n\n        it('beforeEach', function () {\n            var api = {};\n            widgetHook.handle = function(hooks) {\n                expect(hooks.indexOf('menu-hook')).toBe(0);\n                return hooks.shift();\n            };\n            var controller = new Core(api);\n            expect(controller.beforeEach()).toBe('menu-hook');\n        });\n\n        it('action_error', function () {\n            var api = {\n                locals: {},\n                setStatusCode: function(code) {\n                    expect(code).toBe(500);\n                },\n                renderFile: function(name, locals) {\n                    expect(name).toBe('home/error');\n                    expect(locals.pageTitle).toBe('Error - mvcjs nodejs framework');\n                    expect(locals.text).toBe('ERROR');\n                    return 'RENDER';\n                }\n            };\n            spyOn(api, 'setStatusCode').and.callThrough();\n            spyOn(api, 'renderFile').and.callThrough();\n            var controller = new Core({});\n            var response = controller.action_error.call(api, {\n                code: 500,\n                toString: function() {\n                    return \"ERROR\";\n                }\n            });\n            expect(api.setStatusCode).toHaveBeenCalled();\n            expect(api.renderFile).toHaveBeenCalled();\n            expect(response).toBe('RENDER');\n        });\n    });\n</code>\n",
    "url": "/guide/tdd",
    "pageTitle": "TDD - test driven development - mvcjs nodejs framework",
    "pageDesc": "It is very important to test your application correctly, application should have unit tests, integration tests and end to end tests"
  }
]